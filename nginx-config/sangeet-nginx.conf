events {
    worker_connections 1024; # Max connections per worker
}


http {
    # sendfile on;
    # tcp_nopush on;
    # tcp_nodelay on;
    # keepalive_timeout 65;
    # types_hash_max_size 2048;
    # server_tokens off; # Uncomment to hide Nginx version

    # # Gzip settings for compression
    # gzip on;
    # gzip_disable "msie6";
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    # --- Define upstreams for your backend services ---
    # Docker will resolve these service names to the container IPs.

    upstream ui_server {
        # Assuming your main UI service is named 'sangeet_ui_server' in docker-compose
        # and it listens on port 80 internally. Adjust if different.
        server sangeet_ui_server:80;
    }
    upstream stream_server {
        # Assuming your main UI service is named 'sangeet_ui_server' in docker-compose
        # and it listens on port 80 internally. Adjust if different.
        server sangeet_ui_server:2300;
    }
    upstream download_server {
        # Assuming your main UI service is named 'sangeet_ui_server' in docker-compose
        # and it listens on port 80 internally. Adjust if different.
        server sangeet_ui_server:2301;
    }
    upstream lyrics_server {
        # Assuming your main UI service is named 'sangeet_ui_server' in docker-compose
        # and it listens on port 80 internally. Adjust if different.
        server sangeet_lyrics_server:2302;
    }
    log_format main_ext '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        '"$http_x_forwarded_for" "$server_protocol"';
    server {


        # listen 8080 default_server; # Added default_server to make it the catch-all for port 80
        # listen 8080 default_server;
        # listen 8080 default_server;
        # http2 on;
        # listen 8080 ssl http2 default_server;
        listen 8080 ssl default_server;
        http2 on;

        

        server_name _;             # Using underscore as a catch-all server_name
        access_log /var/log/nginx/access.log main_ext;
        # --- Add these SSL directives ---
        # Point to the certificate and key files inside the container
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 5m;
        # ------------------------------
        

        location /healthz {
            # This tells Nginx to not log requests for this location, keeping logs clean.
            access_log off; 
            # This returns a simple 200 OK response with the text "healthy".
            return 200 "healthy";
        }
        location / {
            proxy_pass http://ui_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_intercept_errors on; 
        }
        location /stream-server {
            proxy_pass http://stream_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_intercept_errors on; 
        }
        location /download-server {
            proxy_pass http://download_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_intercept_errors on; 
        }
        
        
        location /lyrics-server {
            proxy_pass http://lyrics_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_intercept_errors on; 
        }

        # error_page 404 /custom_404.html;
        # error_page 500 502 503 504 /custom_50x.html;


        # location = /custom_404.html {
        #     root /var/www/html/custom_errors;
        #     internal;
        # }

        # location = /custom_50x.html {
        #     root /var/www/html/custom_errors;
        #     internal;
        # }
        # For 404 Not Found errors


        # error_page 404 @custom_text_404;

        # location @custom_text_404 {
        #     return 404 "Oops! The page you are looking for does not exist here. (Custom Text)\n";
        #     # The \n at the end adds a newline, which is good for command-line clients like curl.
        # }

     

        # location / {
        #     try_files $uri $uri/ =404;
        # }


        error_page 404 @custom_text_404;

        location @custom_text_404 {
            # You can add a Content-Type header if you want to be explicit,
            # though Nginx usually sends text/plain for 'return'.
            # add_header Content-Type text/plain;
            return 404 "Oops! The page you are looking for does not exist here.";
        }

        # For 50x Server Errors
        error_page 500 502 503 504 @custom_text_50x;

        location @custom_text_50x {
            # You can make the text different for different 50x errors if you want,
            # or use a generic one like this.
            # The variable $status will contain the actual error code (e.g., 500, 502).
            return 503 "Oh dear! Something went wrong on our server maybe our backend is having a huge traffic from world";
        }
    }
    server {


       
        listen 80;
    
        

        server_name _;             # Using underscore as a catch-all server_name
        access_log /var/log/nginx/access.log main_ext;
      

        location /healthz {
            # This tells Nginx to not log requests for this location, keeping logs clean.
            access_log off; 
            # This returns a simple 200 OK response with the text "healthy".
            return 200 "healthy";
        }
        location / {
            proxy_pass http://ui_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_intercept_errors on; 
        }
        location /stream-server {
            proxy_pass http://stream_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_intercept_errors on; 
        }
        location /download-server {
            proxy_pass http://download_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_intercept_errors on; 
        }
        
        
        location /lyrics-server {
            proxy_pass http://lyrics_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_intercept_errors on; 
        }

        # error_page 404 /custom_404.html;
        # error_page 500 502 503 504 /custom_50x.html;


        # location = /custom_404.html {
        #     root /var/www/html/custom_errors;
        #     internal;
        # }

        # location = /custom_50x.html {
        #     root /var/www/html/custom_errors;
        #     internal;
        # }
        # For 404 Not Found errors


        # error_page 404 @custom_text_404;

        # location @custom_text_404 {
        #     return 404 "Oops! The page you are looking for does not exist here. (Custom Text)\n";
        #     # The \n at the end adds a newline, which is good for command-line clients like curl.
        # }

     

        # location / {
        #     try_files $uri $uri/ =404;
        # }


        error_page 404 @custom_text_404;

        location @custom_text_404 {
            # You can add a Content-Type header if you want to be explicit,
            # though Nginx usually sends text/plain for 'return'.
            # add_header Content-Type text/plain;
            return 404 "Oops! The page you are looking for does not exist here.";
        }

        # For 50x Server Errors
        error_page 500 502 503 504 @custom_text_50x;

        location @custom_text_50x {
            # You can make the text different for different 50x errors if you want,
            # or use a generic one like this.
            # The variable $status will contain the actual error code (e.g., 500, 502).
            return 503 "Oh dear! Something went wrong on our server maybe our backend is having a huge traffic from world";
        }
    }
}